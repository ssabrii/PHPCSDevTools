dist: trusty

language: php

## Cache composer and apt downloads.
cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

php:
  - 5.4
  - 5.5
  - 5.6
  - 7.0
  - 7.1
  - 7.2

env:
  # `master`
  - PHPCS_VERSION="dev-master" LINT=1
  # Lowest supported PHPCS version.
  - PHPCS_VERSION="3.0.2"

# Define the stages used.
# For non-PRs, only the sniff and quicktest stages are run.
# For pull requests and merges, the full script is run (skipping quicktest).
# Note: for pull requests, "develop" is the base branch name.
# See: https://docs.travis-ci.com/user/conditions-v1
stages:
  - name: sniff
  - name: quicktest
    if: type = push AND branch NOT IN (master)
  - name: test
    if: branch IN (master, develop)

jobs:
  fast_finish: true
  include:
    #### SNIFF STAGE ####
    - stage: sniff
      php: 7.3
      env: PHPCS_VERSION="dev-master"
      addons:
        apt:
          packages:
            - libxml2-utils
      script:
        # Check the code style of the code base.
        - composer check-cs

        # Validate the xml file.
        # @link http://xmlsoft.org/xmllint.html
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./PHPCSDebug/ruleset.xml
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./PHPCSDev/ruleset.xml

        # Check the code-style consistency of the xml files.
        - diff -B ./PHPCSDebug/ruleset.xml <(xmllint --format "./PHPCSDebug/ruleset.xml")
        - diff -B ./PHPCSDev/ruleset.xml <(xmllint --format "./PHPCSDev/ruleset.xml")

        # Validate the composer.json file.
        # @link https://getcomposer.org/doc/03-cli.md#validate
        - composer validate --no-check-all --strict

    #### QUICK TEST STAGE ####
    # This is a much quicker test which only runs the unit tests and linting against the low/high
    # supported PHP/PHPCS combinations.
    - stage: quicktest
      php: 7.3
      env: PHPCS_VERSION="dev-master" LINT=1
     
    - php: 7.2
      env: PHPCS_VERSION="3.0.2"

    - php: 5.4
      env: PHPCS_VERSION="dev-master" LINT=1
      
    - php: 5.4
      env: PHPCS_VERSION="3.0.2"

    #### TEST STAGE ####
    # Additional builds to prevent issues with PHPCS versions incompatible with certain PHP versions.
    - stage: test
      php: 7.3
      env: PHPCS_VERSION="dev-master" LINT=1
    # PHPCS is only compatible with PHP 7.3 as of version 3.3.1.
    - php: 7.3
      env: PHPCS_VERSION="3.3.1"
    - php: 7.4
      env: PHPCS_VERSION="dev-master"
    # PHPCS is only compatible with PHP 7.4 as of version 3.5.0.
    - php: 7.4
      env: PHPCS_VERSION="3.5.0"
    - php: "nightly"
      env: PHPCS_VERSION="n/a" LINT=1

  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"


before_install:
  # Speed up build time by disabling Xdebug when its not needed.
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'

  # On stable PHPCS versions, allow for PHP deprecation notices.
  # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
  - |
    if [[ "$TRAVIS_BUILD_STAGE_NAME" != "Sniff" && "$PHPCS_VERSION" != "dev-master" && "$PHPCS_VERSION" != "n/a" ]]; then
      echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

  - export XMLLINT_INDENT="    "

  # Set up test environment using Composer.
  - |
    if [[ $PHPCS_VERSION != "n/a" ]]; then
      composer require --no-update --no-scripts squizlabs/php_codesniffer:${PHPCS_VERSION}
    fi
  - |
    if [[ "$TRAVIS_BUILD_STAGE_NAME" == "Sniff" || $PHPCS_VERSION == "n/a" ]]; then
      # The sniff stage doesn't run the unit tests, so no need for PHPUnit.
      composer remove --dev phpunit/phpunit --no-update --no-scripts
    elif [[ "$PHPCS_VERSION" < "3.1.0" ]]; then
      # PHPCS < 3.1.0 is not compatible with PHPUnit 6.x.
      composer require --dev phpunit/phpunit:"^4.0||^5.0" --no-update --no-scripts
    elif [[ "$PHPCS_VERSION" < "3.2.3" ]]; then
      # PHPCS < 3.2.3 is not compatible with PHPUnit 7.x.
      composer require --dev phpunit/phpunit:"^4.0||^5.0||^6.0" --no-update --no-scripts
    fi

  # --prefer-dist will allow for optimal use of the travis caching ability.
  # The Composer PHPCS plugin takes care of setting the installed_paths for PHPCS.
  - composer install --prefer-dist --no-suggest


script:
  # Lint PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then composer lint; fi

  # Check that any sniffs available are feature complete.
  # This also acts as an integration test for the feature completeness script,
  # which is why it is run against various PHP versions and not in the "Sniff" stage.
  - if [[ "$LINT" == "1" ]]; then composer check-complete; fi

  # Run the unit tests.
  - if [[ $PHPCS_VERSION != "n/a" ]]; then composer run-tests; fi
